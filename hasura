
using cloud Free version (+ Heroku Postgress DB) - 1GD data limit, only 60 requests/min
(also can self host community version if needed)

Hasura console

3 types of changes (via GraphQL)
Query
Mutation
Subscription 
    -> if subscription active, changes at DB level will trigger change in response

Data Manager > Relationships
Object relationships (one-to-one)
    -> Once added foreign keys in Table, Hasura will suggest it under `Relationships`
Array relationships (one-to-many)


--
Using Database View to create temporary table.
The view is not physically materialized. Instead, the query is run every time the view is referenced in a query. 
CREATE OR REPLACE VIEW "public"."online_users" AS
 SELECT users.id,
    users.last_seen 
   FROM users
  WHERE (users.last_seen >= (now() - '00:00:30'::interval)); //<-- if users.last_seen is updated, this view will be refreshed


Use subscription to query this View, hence will get latest info

With SQL View, expose as little data as possible (with just user id for e.g.)
Create a Relationship, and then expose via GraphQL however much you want
(persumably the security policy can be controlled at GraphQL level)
query {
  online_users {
    id  --> user.id
    last_seen
    user {  --> user.id relationship to user
      id
      name
    }
  }
}

---
Role-based access control
Data Manager > Permissions

---
Authentication
Can use Auth0 (free plan up to 7000 active users only)

HASURA_GRAPHQL_JWT_SECRET



----
A bit of GraphQL
// insert but on conflict update the columns instead
mutation {
    insert_users(objects: [{
      id: "1", name: "overwritten" , last_seen: "now()"
    }], on_conflict: {constraint: users_pkey, update_columns: [last_seen, name]}
    ) {
      affected_rows
    }
  }

